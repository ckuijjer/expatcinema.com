service: expatcinema

useDotenv: true
configValidationMode: error

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:PutObject'
            - 's3:GetObject'
          Resource:
            - 'arn:aws:s3:::${self:custom.scrapersOutputBucketName}/*'

        - Effect: 'Allow'
          Action:
            - 's3:ListBucket'
          Resource:
            - 'arn:aws:s3:::${self:custom.scrapersOutputBucketName}'

        - Effect: 'Allow'
          Action:
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::${self:custom.publicBucketName}/*'

        - Effect: 'Allow'
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt:
                - ScrapersAnalyticsDynamoDbTable
                - Arn
            - Fn::GetAtt:
                - ScrapersMovieMetadataDynamoDbTable
                - Arn

  environment:
    NODE_OPTIONS: --enable-source-maps --trace-warnings
    POWERTOOLS_SERVICE_NAME: ${self:service}-${self:provider.stage}

  logRetentionInDays: 60

functions:
  scrapers:
    handler: handler.scrapers
    memorySize: 2048
    timeout: 300
    events:
      - schedule:
          rate: cron(0 3 * * ? *)
          enabled: ${self:custom.scraperScheduleEnabled.${self:provider.stage}}
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0 # for the filmhuis lumen scraper
      PRIVATE_BUCKET: ${self:custom.scrapersOutputBucketName}
      PUBLIC_BUCKET: ${self:custom.publicBucketName}
      DYNAMODB_ANALYTICS: ${self:custom.scrapersAnalyticsTableName}
      DYNAMODB_MOVIE_METADATA: ${env:DYNAMODB_MOVIE_METADATA}
      TMDB_API_KEY: ${env:TMDB_API_KEY}
      OMDB_API_KEY: ${env:OMDB_API_KEY}
      GOOGLE_CUSTOM_SEARCH_ID: ${env:GOOGLE_CUSTOM_SEARCH_ID}
      GOOGLE_CUSTOM_SEARCH_API_KEY: ${env:GOOGLE_CUSTOM_SEARCH_API_KEY}
      SCRAPERS: ${env:SCRAPERS, ''} # '' as default value, as SCRAPERS is the only optional env var
    layers:
      - arn:aws:lambda:eu-west-1:764866452798:layer:chrome-aws-lambda:31 # https://github.com/shelfio/chrome-aws-lambda-layer

  playground:
    handler: handler.playground
    timeout: 300
    layers:
      - arn:aws:lambda:eu-west-1:764866452798:layer:chrome-aws-lambda:31 # https://github.com/shelfio/chrome-aws-lambda-layer
    environment:
      DYNAMODB_MOVIE_METADATA: ${env:DYNAMODB_MOVIE_METADATA}
      TMDB_API_KEY: ${env:TMDB_API_KEY}
      OMDB_API_KEY: ${env:OMDB_API_KEY}
      GOOGLE_CUSTOM_SEARCH_ID: ${env:GOOGLE_CUSTOM_SEARCH_ID}
      GOOGLE_CUSTOM_SEARCH_API_KEY: ${env:GOOGLE_CUSTOM_SEARCH_API_KEY}

  notifySlack:
    handler: handler.notifySlack
    environment:
      SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}
    events:
      - cloudwatchLog:
          logGroup: /aws/lambda/expatcinema-${self:provider.stage}-scrapers
    layers:
      - arn:aws:lambda:eu-west-1:764866452798:layer:chrome-aws-lambda:31 # https://github.com/shelfio/chrome-aws-lambda-layer

  analytics:
    handler: handler.analytics
    events:
      - httpApi:
          method: GET
          path: /analytics
    environment:
      DYNAMODB_ANALYTICS: ${self:custom.scrapersAnalyticsTableName}
    layers:
      - arn:aws:lambda:eu-west-1:764866452798:layer:chrome-aws-lambda:31 # https://github.com/shelfio/chrome-aws-lambda-layer

  fillAnalytics:
    handler: handler.fillAnalytics
    timeout: 600
    environment:
      PRIVATE_BUCKET: ${self:custom.scrapersOutputBucketName}
      DYNAMODB_ANALYTICS: ${self:custom.scrapersAnalyticsTableName}
    layers:
      - arn:aws:lambda:eu-west-1:764866452798:layer:chrome-aws-lambda:31 # https://github.com/shelfio/chrome-aws-lambda-layer

resources:
  Description: expatcinema.com - ${self:provider.stage} stage
  Resources:
    ScrapersOutputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.scrapersOutputBucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    PublicBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.publicBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
              MaxAge: 3000

    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: PublicBucket
      Properties:
        Bucket: ${self:custom.publicBucketName}
        PolicyDocument:
          Statement:
            - Principal: '*'
              Action:
                - s3:GetObject
              Effect: Allow
              Sid: 'AddPerm'
              Resource: arn:aws:s3:::${self:custom.publicBucketName}/*

    ScrapersAnalyticsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TableName: ${self:custom.scrapersAnalyticsTableName}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    ScrapersMovieMetadataDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: query
            AttributeType: S
        KeySchema:
          - AttributeName: query
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TableName: ${self:custom.scrapersMovieMetadataTableName}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

custom:
  publicBucketName: expatcinema-public-${self:provider.stage}
  scrapersOutputBucketName: expatcinema-scrapers-output-${self:provider.stage}
  scrapersAnalyticsTableName: expatcinema-scrapers-analytics-${self:provider.stage}
  scrapersMovieMetadataTableName: expatcinema-scrapers-movie-metadata-${self:provider.stage}

  scraperScheduleEnabled:
    local: false
    dev: false
    prod: true

  esbuild:
    minify: false
    bundle: true
    sourcemap: true
    metafile: true
    watch:
      pattern: ['*.ts', '*.js']
      ignore: ['.serverless', '.build', '.esbuild']
    packager: yarn
    exclude:
      - puppeteer-core # as we're using the lambda layer, no need to bundle it
      - '@sparticuz/chrome-aws-lambda' # as we're using the lambda layer, no need to bundle it
      - aws-sdk
    external:
      - emitter # as batch dynamically imports from emitter

plugins:
  - serverless-esbuild
  - serverless-offline
