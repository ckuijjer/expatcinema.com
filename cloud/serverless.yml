service: expatcinema

useDotenv: true
variablesResolutionMode: 20210326
configValidationMode: error

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::${self:custom.scrapersOutputBucketName}/*'

        - Effect: 'Allow'
          Action:
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::${self:custom.publicBucketName}/*'

        - Effect: 'Allow'
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt:
                - ScrapersAnalyticsDynamoDbTable
                - Arn
  environment:
    DYNAMODB_ANALYTICS: ${self:custom.scrapersAnalyticsTableName}

  logRetentionInDays: 14
  lambdaHashingVersion: 20201221

functions:
  scrapers:
    handler: handler.scrapers
    timeout: 300
    events:
      - schedule: cron(0 3 * * ? *)
    environment:
      DEBUG: '*,-resolve'
      NODE_TLS_REJECT_UNAUTHORIZED: 0 # for the filmhuis lumen scraper
  playground:
    handler: handler.playground
    timeout: 300
  notifySlack:
    handler: handler.notifySlack
    environment:
      SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}
    events:
      - cloudwatchLog: '/aws/lambda/expatcinema-dev-scrapers'
  analytics:
    handler: handler.analytics
    events:
      - httpApi:
          method: GET
          path: /analytics
  fillAnalytics:
    handler: handler.fillAnalytics

resources:
  Resources:
    ScrapersOutputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.scrapersOutputBucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    PublicBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.publicBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
              MaxAge: 3000

    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn: PublicBucket
      Properties:
        Bucket: ${self:custom.publicBucketName}
        PolicyDocument:
          Statement:
            - Principal: '*'
              Action:
                - s3:GetObject
              Effect: Allow
              Sid: 'AddPerm'
              Resource: arn:aws:s3:::${self:custom.publicBucketName}/*

    ScrapersAnalyticsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TableName: ${self:custom.scrapersAnalyticsTableName}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

custom:
  publicBucketName: expatcinema-public
  scrapersOutputBucketName: expatcinema-scrapers-output
  scrapersAnalyticsTableName: expatcinema-scrapers-analytics

plugins:
  - serverless-plugin-monorepo
  - serverless-offline
